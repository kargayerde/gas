{"version":3,"sources":["getGas.js","assets/img/cross.svg","assets/img/plus.svg","assets/img/refresh.svg","assets/asdf.wav","AlarmBox.js","Graph.js","auth.js","App.js","index.js"],"names":["getGas","setGasData","gasData","parseTime","config","messageCount","rektFlag","console","log","socket","WebSocket","onopen","e","onmessage","priceData","Object","values","JSON","parse","data","map","value","index","wei","toFixed","prices","slice","timestamp","prev","updateCount","lastUpdate","sums","sampleSize","item","Number","history","concat","onclose","wasClean","code","autoRetry","auto","setTimeout","onerror","STATUS","AlarmBox","useState","alarmInput","setAlarmInput","alarms","setAlarms","sound","Audio","soundFile","handleAddAlarm","find","status","sort","a","b","useEffect","nextAlarms","play","checkAlarm","getAlarmClass","className","maxLength","onChange","target","onKeyDown","key","isNaN","preventDefault","filterNaNfromInput","onWheel","input","deltaY","Math","max","placeholder","onClick","src","plus","newAlarms","handleResetAlarm","refresh","splice","handleClearAlarm","cross","Graph","gasStats","COLORS","RED","YELLOW","GREEN","PURPLE","autoScrollRef","useRef","autoScroll","setAutoScroll","scrollGraph","event","element","scrollBy","maxScroll","scrollWidth","clientWidth","scrollLeft","renderBars","array","offset","parentNode","colorArr","style","height","width","position","bottom","left","background","zIndex","current","scrollIntoView","behavior","inline","block","passed","Fragment","positions","viewport","window","innerHeight","x1","x2","y1","y2","overflow","opacity","id","strokeWidth","stroke","ref","renderLines","historyArray","reduce","failed","credentials","etherscanKey","process","ethGasStationKey","wallet","api","etherscanApi","init","date","Date","toUTCString","replace","App","configRef","ggData","setGgData","EGSData","setEGSData","ethPrice","setEthPrice","txGasCost","setTxGasCost","showGraph","setConfig","getEthPrice","stats","ethprice","price","result","ethusd","getEthGasStation","axios","get","KEYS","egsPrice","fastest","fast","average","safeLow","x","setInterval","txCost","close","undefined","type","checked","pre","onchange","htmlFor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ba8febc.chunk.js","sourcesContent":["const convWeiToGwei = (wei) => wei / 10 ** 9;\r\n\r\nconst getGas = ({ setGasData, gasData, parseTime, config }) => {\r\n\tlet messageCount = 0;\r\n\r\n\tsetGasData({ ...gasData, rektFlag: \"neutral\" });\r\n\r\n\tconsole.log(`opening websocket`);\r\n\r\n\tconst socket = new WebSocket(\"wss://gasgas.io/prices\");\r\n\r\n\tsocket.onopen = (e) => {\r\n\t\tconsole.log(\"websocket connected\");\r\n\t\tsetGasData({ ...gasData, socket: socket, rektFlag: false });\r\n\t};\r\n\r\n\tsocket.onmessage = (e) => {\r\n\t\tmessageCount++;\r\n\t\tlet priceData = Object.values(JSON.parse(e.data).data).map((value, index) => {\r\n\t\t\treturn index === 4 ? parseTime(value) : convWeiToGwei(value).toFixed(1);\r\n\t\t});\r\n\t\tlet prices = priceData.slice(0, 4);\r\n\t\tlet timestamp = priceData[4];\r\n\t\tsetGasData((prev) => {\r\n\t\t\treturn {\r\n\t\t\t\tsocket: socket,\r\n\t\t\t\tprices: [...prices],\r\n\t\t\t\tupdateCount: messageCount,\r\n\t\t\t\tlastUpdate: timestamp,\r\n\t\t\t\tsums:\r\n\t\t\t\t\tprev.sampleSize === 0\r\n\t\t\t\t\t\t? prices\r\n\t\t\t\t\t\t: prev.sums.map((item, index) => Number(item) + Number(prices[index])),\r\n\t\t\t\tsampleSize: prev.sampleSize + 1,\r\n\t\t\t\thistory: [...prev.history].concat([prices]),\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\tsocket.onclose = (e) => {\r\n\t\tif (e.wasClean) {\r\n\t\t\tconsole.log(`${e.code}: Connection closed cleanly`);\r\n\t\t} else {\r\n\t\t\tconsole.log(`${e.code}: Connection rekt`);\r\n\t\t\tsetGasData({\r\n\t\t\t\t...gasData,\r\n\t\t\t\tprices: [\"R\", \"E\", \"K\", \"T\", \"gasgas.io api rekt\", \"ded\"],\r\n\t\t\t\trektFlag: true,\r\n\t\t\t});\r\n\t\t\tconsole.log({ config });\r\n\t\t\tif (config.autoRetry) {\r\n\t\t\t\tconsole.log({ auto: config.autoRetry });\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tgetGas({ setGasData, gasData, parseTime, config });\r\n\t\t\t\t\tconsole.log(`getting gas`);\r\n\t\t\t\t}, 15000);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tsocket.onerror = (e) => {\r\n\t\tconsole.log({ onerror: e });\r\n\t};\r\n};\r\n\r\nexport default getGas;\r\n","export default __webpack_public_path__ + \"static/media/cross.7ac58f49.svg\";","export default __webpack_public_path__ + \"static/media/plus.0737ce86.svg\";","export default __webpack_public_path__ + \"static/media/refresh.755ed584.svg\";","export default __webpack_public_path__ + \"static/media/asdf.b49a92e1.wav\";","import { useState, useEffect } from \"react\";\r\nimport { cross, refresh, plus } from \"./assets/img\";\r\n\r\nimport soundFile from \"./assets/asdf.wav\";\r\n\r\nimport \"./AlarmBox.css\";\r\n\r\nconst STATUS = {\r\n\tSET: \"set\",\r\n\tRINGING: \"ringing\",\r\n\tSNOOZED: \"snoozed\",\r\n};\r\n\r\nexport const AlarmBox = ({ gasData }) => {\r\n\tconst [alarmInput, setAlarmInput] = useState();\r\n\tconst [alarms, setAlarms] = useState([]);\r\n\r\n\tlet sound = new Audio(soundFile);\r\n\r\n\tconst filterNaNfromInput = (e) => {\r\n\t\tconst allowedKeys = [\r\n\t\t\t\"Backspace\",\r\n\t\t\t\"Delete\",\r\n\t\t\t\"Home\",\r\n\t\t\t\"End\",\r\n\t\t\t\"ArrowUp\",\r\n\t\t\t\"ArrowDown\",\r\n\t\t\t\"ArrowLeft\",\r\n\t\t\t\"ArrowRight\",\r\n\t\t];\r\n\r\n\t\tif (!allowedKeys.find((item) => item === e.key) && isNaN(e.key)) e.preventDefault();\r\n\t};\r\n\r\n\tconst handleAlarmKeyDown = (e) => {\r\n\t\tif (e.key === \"Enter\") handleAddAlarm();\r\n\t\tfilterNaNfromInput(e);\r\n\t};\r\n\r\n\tconst handleAlarmWheel = (e) => {\r\n\t\tlet input = isNaN(alarmInput) ? 0 : alarmInput;\r\n\t\tinput = Number(input) + e.deltaY / -50;\r\n\t\tsetAlarmInput(Math.max(input, 0));\r\n\t};\r\n\r\n\tconst checkAlarm = (alarms) => {\r\n\t\tif (!gasData) return;\r\n\r\n\t\talarms.find((item, index) => {\r\n\t\t\tif (!(Number(item.value) >= gasData.prices[2])) {\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\t\t\t\tif (alarms[index].status !== STATUS.RINGING) {\r\n\t\t\t\t\tlet nextAlarms = [...alarms];\r\n\t\t\t\t\tnextAlarms[index].status = STATUS.RINGING;\r\n\r\n\t\t\t\t\tsetAlarms(nextAlarms);\r\n\t\t\t\t\tsound.play();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleAddAlarm = () => {\r\n\t\tif (alarmInput <= 9999 && alarmInput > 0 && !alarms.find((item) => item.value === alarmInput)) {\r\n\t\t\tlet newAlarm = { value: alarmInput, status: STATUS.SET };\r\n\t\t\tsetAlarms([newAlarm, ...alarms].sort((a, b) => b.value - a.value));\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleClearAlarm = (index) => {\r\n\t\tlet newAlarms = [...alarms];\r\n\t\tnewAlarms.splice(index, 1);\r\n\t\tsetAlarms(newAlarms);\r\n\t};\r\n\tconst handleResetAlarm = (index) => {\r\n\t\tlet newAlarms = [...alarms];\r\n\t\tnewAlarms[index].status = STATUS.SET;\r\n\t\tsetAlarms(newAlarms);\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tcheckAlarm(alarms);\r\n\t}, [gasData]);\r\n\r\n\tconst getAlarmClass = (index) => {\r\n\t\treturn alarms[index].status === STATUS.RINGING ? \"alert\" : \"\";\r\n\t};\r\n\r\n\tconst displayAlarms = () => {\r\n\t\treturn alarms.map((item, index) => (\r\n\t\t\t<div key={index} className={`alarm-box alarm-${index + 1} ${getAlarmClass(index)}`}>\r\n\t\t\t\t<div className=\"alarm-box-text-box\">\r\n\t\t\t\t\t<span>⏰</span>\r\n\t\t\t\t\t<span>{item.value}</span>\r\n\t\t\t\t\t<span>gwei</span>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"small-button-box\">\r\n\t\t\t\t\t{item.status === STATUS.RINGING ? (\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName=\"alarm-clear-button small-button\"\r\n\t\t\t\t\t\t\tonClick={() => handleResetAlarm(index)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<img src={refresh} />\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\tfalse\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"alarm-reset-button small-button\"\r\n\t\t\t\t\t\tonClick={() => handleClearAlarm(index)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<img src={cross} />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t));\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"alarm-box-container\">\r\n\t\t\t<div className=\"add-alarm-container\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName=\"add-alarm-input\"\r\n\t\t\t\t\t// type=\"number\"\r\n\t\t\t\t\t// min=\"1\"\r\n\t\t\t\t\t// max=\"9999\"\r\n\t\t\t\t\t// autofocus=\"true\"\r\n\t\t\t\t\tmaxLength=\"4\"\r\n\t\t\t\t\tonChange={(e) => setAlarmInput(e.target.value)}\r\n\t\t\t\t\tonKeyDown={handleAlarmKeyDown}\r\n\t\t\t\t\tonWheel={handleAlarmWheel}\r\n\t\t\t\t\tvalue={alarmInput === 0 ? \"\" : alarmInput}\r\n\t\t\t\t\tplaceholder=\"alarm\"\r\n\t\t\t\t/>\r\n\t\t\t\t<button className=\"add-alarm-button\" placeholder=\"alarm\" onClick={handleAddAlarm}>\r\n\t\t\t\t\t<img src={plus} />\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t{displayAlarms()}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nimport { AlarmBox } from \"./AlarmBox\";\r\n\r\nimport \"./Graph.css\";\r\n\r\nexport const Graph = ({ gasStats }) => {\r\n\tconst COLORS = {\r\n\t\tRED: \"rgb(247, 26, 0)\",\r\n\t\tYELLOW: \"rgb(255, 237, 48)\",\r\n\t\tGREEN: \"rgb(0, 135, 57)\",\r\n\t\tPURPLE: \"rebeccapurple\",\r\n\t};\r\n\tconst chartSpacing = 10;\r\n\r\n\tconst autoScrollRef = useRef();\r\n\tconst [autoScroll, setAutoScroll] = useState(true);\r\n\r\n\tconst findMeans = ({ historyArray }) =>\r\n\t\thistoryArray.map((array) => array.reduce((a, b) => Number(a) + Number(b)) / 4);\r\n\r\n\tconst scrollGraph = ({ event, element }) => {\r\n\t\telement.scrollBy(event.deltaY, 0);\r\n\r\n\t\tlet maxScroll = element.scrollWidth - element.clientWidth;\r\n\t\tsetAutoScroll(element.scrollLeft === maxScroll ? true : false);\r\n\t};\r\n\r\n\t// let positions = [...Array(500).keys()].map(() => Math.random() * Math.random() * 500 + 30);\r\n\r\n\tconst renderLines = ({ positions, offset }) => {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"line-graph-container\"\r\n\t\t\t\tonWheel={(e) => scrollGraph({ event: e, element: e.target.parentNode })}\r\n\t\t\t>\r\n\t\t\t\t{positions.map((item, index) => {\r\n\t\t\t\t\tlet viewport = window.innerHeight;\r\n\t\t\t\t\tlet x1 = index * offset;\r\n\t\t\t\t\tlet x2 = (index + 1) * offset;\r\n\t\t\t\t\tlet y1 = viewport - Number(item);\r\n\t\t\t\t\tlet y2 = viewport - Number(positions[index + 1]);\r\n\t\t\t\t\tif (!y2)\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\tclassName=\"line-graph-point\"\r\n\t\t\t\t\t\t\t\t\tonWheel={(e) =>\r\n\t\t\t\t\t\t\t\t\t\tscrollGraph({\r\n\t\t\t\t\t\t\t\t\t\t\tevent: e,\r\n\t\t\t\t\t\t\t\t\t\t\telement: e.target.parentNode.parentNode,\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tleft: `${x1 + 10}px`,\r\n\t\t\t\t\t\t\t\t\t\tbottom: `${item}px`,\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t></span>\r\n\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\tref={autoScrollRef}\r\n\t\t\t\t\t\t\t\t\tclassName=\"absence\"\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tleft: `${x1 + 200}px`,\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t></span>\r\n\t\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\tclassName=\"line-graph-point\"\r\n\t\t\t\t\t\t\t\tonWheel={(e) =>\r\n\t\t\t\t\t\t\t\t\tscrollGraph({\r\n\t\t\t\t\t\t\t\t\t\tevent: e,\r\n\t\t\t\t\t\t\t\t\t\telement: e.target.parentNode.parentNode,\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tleft: `${x1 + 10}px`,\r\n\t\t\t\t\t\t\t\t\tbottom: `${item}px`,\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t></span>\r\n\t\t\t\t\t\t\t<svg\r\n\t\t\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\t\t\tclassName={`line line-${index}`}\r\n\t\t\t\t\t\t\t\tonWheel={(e) =>\r\n\t\t\t\t\t\t\t\t\tscrollGraph({\r\n\t\t\t\t\t\t\t\t\t\tevent: e,\r\n\t\t\t\t\t\t\t\t\t\telement: e.target.parentNode.parentNode,\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\t\t\t\tleft: \"10px\",\r\n\t\t\t\t\t\t\t\t\toverflow: \"visible\",\r\n\t\t\t\t\t\t\t\t\topacity: \"1\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<line\r\n\t\t\t\t\t\t\t\t\tid={`line-${index}`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ strokeWidth: 3, stroke: \"hsl(190, 97%, 60%)\" }}\r\n\t\t\t\t\t\t\t\t\tx1={x1 + 1.4} // sqrt2 ~= 1.4\r\n\t\t\t\t\t\t\t\t\tx2={x2 + 1.4} // point edge 4px\r\n\t\t\t\t\t\t\t\t\ty1={y1}\r\n\t\t\t\t\t\t\t\t\ty2={y2}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\tconst renderBars = () => {\r\n\t\treturn gasStats.history.map((array, index) => {\r\n\t\t\tlet offset = (index + 1) * chartSpacing;\r\n\r\n\t\t\tconst drawBar = () =>\r\n\t\t\t\tarray.map((item, index) => {\r\n\t\t\t\t\tlet colorArr = Object.values(COLORS);\r\n\t\t\t\t\tlet style = {\r\n\t\t\t\t\t\theight: `${item}px`,\r\n\t\t\t\t\t\twidth: \"4px\",\r\n\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\tbottom: \"0px\",\r\n\t\t\t\t\t\tleft: `${offset}px`,\r\n\t\t\t\t\t\tbackground: `${colorArr[index]}`,\r\n\t\t\t\t\t\tzIndex: `${100 + index}`,\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclassName=\"graph-bar\"\r\n\t\t\t\t\t\t\tonWheel={(e) =>\r\n\t\t\t\t\t\t\t\tscrollGraph({\r\n\t\t\t\t\t\t\t\t\tevent: e,\r\n\t\t\t\t\t\t\t\t\telement: e.target.parentNode.parentNode,\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstyle={style}\r\n\t\t\t\t\t\t></span>\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<span\r\n\t\t\t\t\tclassName=\"bar-container\"\r\n\t\t\t\t\tonWheel={(e) =>\r\n\t\t\t\t\t\tscrollGraph({\r\n\t\t\t\t\t\t\tevent: e,\r\n\t\t\t\t\t\t\telement: e.target.parentNode,\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t>\r\n\t\t\t\t\t{drawBar()}\r\n\t\t\t\t</span>\r\n\t\t\t);\r\n\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (autoScrollRef.current && autoScroll)\r\n\t\t\tautoScrollRef.current.scrollIntoView({\r\n\t\t\t\tbehavior: \"smooth\",\r\n\t\t\t\tinline: \"center\",\r\n\t\t\t\tblock: \"center\",\r\n\t\t\t});\r\n\t}, [renderBars()]);\r\n\r\n\tif (!gasStats.history[0]) {\r\n\t\tconsole.log({ failed: gasStats });\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconsole.log({ passed: gasStats });\r\n\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{autoScroll ? null : <div className=\"autoscroll-info\">autoscroll paused</div>}\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"graph-container\"\r\n\t\t\t\tonWheel={(e) => scrollGraph({ event: e, element: e.target })}\r\n\t\t\t>\r\n\t\t\t\t{renderLines({\r\n\t\t\t\t\tpositions: findMeans({ historyArray: gasStats.history }),\r\n\t\t\t\t\toffset: chartSpacing,\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t{renderBars()}\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n","const credentials = {\r\n\tetherscanKey: process.env.REACT_APP_ETHERSCAN_API_KEY,\r\n\tethGasStationKey: process.env.REACT_APP_EGS_API_KEY,\r\n\twallet: process.env.REACT_APP_TEST_WALLET,\r\n};\r\nexport default credentials;\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport getGas from \"./getGas\";\r\nimport etherscanApi from \"etherscan-api\";\r\nimport axios from \"axios\";\r\n\r\nimport { AlarmBox } from \"./AlarmBox\";\r\nimport { Graph } from \"./Graph\";\r\n\r\nimport KEYS from \"./auth.js\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst api = etherscanApi.init(\"\");\r\n\r\nconst parseTime = (date) => new Date(date).toUTCString().replace(\"GMT\", \"UTC\");\r\n\r\nconst App = () => {\r\n\tconst configRef = useRef();\r\n\tconst [ggData, setGgData] = useState({\r\n\t\tprices: [],\r\n\t\tsocket: null,\r\n\t\trektFlag: false,\r\n\t\tupdateCount: 0,\r\n\t\tlastUpdate: \"\",\r\n\t\tsums: [],\r\n\t\tsampleSize: 0,\r\n\t\thistory: [],\r\n\t});\r\n\t// const [gasStats, setGasStats] = useState({ sums: [], sampleSize: 0, history: [] });\r\n\tconst [EGSData, setEGSData] = useState({\r\n\t\tprices: [],\r\n\t\tsums: [0, 0, 0, 0],\r\n\t\tsampleSize: 0,\r\n\t\thistory: [],\r\n\t});\r\n\tconst [ethPrice, setEthPrice] = useState();\r\n\tconst [txGasCost, setTxGasCost] = useState(21000);\r\n\tconst [config, setConfig] = useState({ autoRetry: false, showGraph: true });\r\n\r\n\tconst getEthPrice = async () => {\r\n\t\tlet price = await api.stats.ethprice();\r\n\t\tsetEthPrice(price.result.ethusd);\r\n\t};\r\n\r\n\tconst getEthGasStation = async () => {\r\n\t\tlet egsPrice = await axios.get(\r\n\t\t\t`https://ethgasstation.info/api/ethgasAPI.json?api-key=${KEYS.ethGasStationKey}`\r\n\t\t);\r\n\t\tlet prices = [\r\n\t\t\tegsPrice.data.fastest,\r\n\t\t\tegsPrice.data.fast,\r\n\t\t\tegsPrice.data.average,\r\n\t\t\tegsPrice.data.safeLow,\r\n\t\t].map((x) => x / 10);\r\n\t\tsetEGSData((prev) => {\r\n\t\t\treturn {\r\n\t\t\t\t...prev,\r\n\t\t\t\tsampleSize: prev.sampleSize + 1,\r\n\t\t\t\tprices: prices,\r\n\t\t\t\tsums: prev.sums.map((item, index) => item + prices[index]),\r\n\t\t\t\thistory: prev.history.concat([prices]),\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGas({ setGasData: setGgData, gasData: ggData, parseTime, config: configRef });\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tconfigRef.current = config;\r\n\t\t// \tconsole.log(\"CONFIG IS CHANGED TO\" + config);\r\n\t}, [config]);\r\n\r\n\tconst ethPriceOracle = () => {\r\n\t\tgetEthPrice();\r\n\t\tgetEthGasStation();\r\n\r\n\t\tsetInterval(() => getEthGasStation(), 5000);\r\n\r\n\t\tsetInterval(() => getEthPrice(), 15000);\r\n\t};\r\n\r\n\tuseEffect(() => ethPriceOracle(), []);\r\n\r\n\tconst gasStartStop = () => {\r\n\t\tif (ggData.socket) {\r\n\t\t\tggData.socket.close();\r\n\t\t\tconsole.log(\"killed connection\");\r\n\t\t\tsetGgData({ ...ggData, socket: undefined });\r\n\t\t} else {\r\n\t\t\tconsole.log(\"reconnecting...\");\r\n\t\t\tgetGas({ setGasData: setGgData, gasData: ggData, parseTime, config: configRef });\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleTxTypeInput = (event) => {\r\n\t\tsetTxGasCost(event.target.value);\r\n\t};\r\n\r\n\tconst renderPriceBoxes = () => {\r\n\t\treturn [\"rapid\", \"fast\", \"standard\", \"slow\"].map((item, index) => {\r\n\t\t\tlet txCost = ((ethPrice * ggData.prices[index] * txGasCost) / 10 ** 9).toFixed(2);\r\n\t\t\treturn (\r\n\t\t\t\t<div className={`price-box ${item}`}>\r\n\t\t\t\t\t{item}:<div className=\"price\">{ggData.prices[index]}</div>\r\n\t\t\t\t\t{isNaN(txCost) ? false : <span className=\"tx-cost\">(${txCost})</span>}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t<div className=\"gas-widget\">\r\n\t\t\t\t<div className=\"gas-frame-container\">\r\n\t\t\t\t\t<div className=\"gas-frame\">\r\n\t\t\t\t\t\t{renderPriceBoxes()}\r\n\t\t\t\t\t\t<div className=\"timestamp\">\r\n\t\t\t\t\t\t\t<span>last update:</span>\r\n\t\t\t\t\t\t\t<span>{ggData.lastUpdate}</span>\r\n\t\t\t\t\t\t\t<span> (update count: {ggData.updateCount})</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"eth-price-container\">\r\n\t\t\t\t\t\t\tETH: {ethPrice ? \"$\" + ethPrice : \"disable adblock\"}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"kill-button-container\">\r\n\t\t\t\t\t\t\t<button className=\"kill-button\" onClick={() => gasStartStop()}>\r\n\t\t\t\t\t\t\t\t{ggData.rektFlag === \"neutral\"\r\n\t\t\t\t\t\t\t\t\t? \"Connecting...\"\r\n\t\t\t\t\t\t\t\t\t: ggData.socket\r\n\t\t\t\t\t\t\t\t\t? \"KILL\"\r\n\t\t\t\t\t\t\t\t\t: ggData.rektFlag\r\n\t\t\t\t\t\t\t\t\t? \"Retry\"\r\n\t\t\t\t\t\t\t\t\t: \"Connect\"}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t{ggData.rektFlag === true ? (\r\n\t\t\t\t\t\t\t\t<span className=\"autoconnect-checkbox\">\r\n\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"autoconnect\"\r\n\t\t\t\t\t\t\t\t\t\tchecked={config.autoRetry}\r\n\t\t\t\t\t\t\t\t\t\t// onChange={(e) =>{\r\n\t\t\t\t\t\t\t\t\t\t// \tconsole.log(e.target.value);\r\n\t\t\t\t\t\t\t\t\t\t// \tsetConfig({ ...config, autoRetry: e.target.value })}\r\n\t\t\t\t\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\t\t\t\t\t\tsetConfig((pre) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"CONFIG IS CHANGED TO \", {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tref: configRef.current,\r\n\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t\t\t// if (!pre.autoRetry) gasStartStop();\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log({ onchange: pre.autoRetry });\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn { ...pre, autoRetry: !pre.autoRetry };\r\n\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t\tconfigRef.current = config;\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<label> auto?</label>\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className=\"tx-select\">\r\n\t\t\t\t\t\t\t<label htmlFor=\"gasCostInput\">tx type: </label>\r\n\t\t\t\t\t\t\t<select id=\"gasCostInput\" onChange={handleTxTypeInput}>\r\n\t\t\t\t\t\t\t\t<option value={21000}>send ETH</option>\r\n\t\t\t\t\t\t\t\t<option value={65000}>send ERC20</option>\r\n\t\t\t\t\t\t\t\t<option value={175000}>LP</option>\r\n\t\t\t\t\t\t\t\t<option value={200000}>SWAP</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<AlarmBox gasData={ggData} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"graph-info-box\">\r\n\t\t\t\t<div>ETH Gas Station API</div>\r\n\t\t\t\t{EGSData.prices.map((item) => (\r\n\t\t\t\t\t<div>{item}</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"temp-alarm\">\r\n\t\t\t\t<AlarmBox gasData={EGSData} />\r\n\t\t\t</div>\r\n\t\t\t{config.showGraph ? <Graph gasStats={ggData.rektFlag ? EGSData : ggData} /> : null}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}